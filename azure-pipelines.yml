trigger:
 - master
 
variables:
  vmImageName: 'ubuntu-latest'
  location: 'Korea Central'
  terraformVersion: 1.1.7
  azureSubscriptionServiceConnectionName: 'svcconn4lds'
  subscription: 'svcconn4lds'
  resourceGroup: 'tf2022demo-rg'
  storageAccount: 'bgzbtfstate'
  storageAccountSku: 'Standard_LRS'
  container: 'bgzbtfstatecont'
  tfstateFile: 'tfstate'
  anyIfChange: false

pool:
  vmImage: $(vmImageName)


steps:

- task: TerraformInstaller@0
  inputs:
    terraformVersion: '1.1.7'

- task: TerraformTaskV1@0
  displayName: terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'svcconn4lds'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: '$(tfstateFile)'

- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-out=tfplan'
    environmentServiceNameAzureRM: 'svcconn4lds'

- task: PowerShell@2
  displayName: detect any terraform change
  inputs:
    targetType: 'inline'
    script: |
      # Write-Host "LASTEXITCODE : $LASTEXITCODE"
      $plan = $(terraform show -json tfplan | ConvertFrom-Json)
      $actions = $plan.resource_changes.change.actions
      Write-Host "Terraform actions : $actions"
      if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
      {
        Write-Host "Terraform will perform the following actions : $actions"
        Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
      }
      else
      {
        Write-Host "There is no change detected in Terraform tfplan file"
      }
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: TerraformTaskV1@0
  displayName: terraform apply tfplan
  condition: eq(variables.anyTfChanges, true)
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: 'tfplan'
    environmentServiceNameAzureRM: 'svcconn4lds'